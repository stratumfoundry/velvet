// Mocks generated by Mockito 5.4.4 from annotations
// in velvet_framework/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:velvet_framework/src/core/env/contracts/env_config_contract.dart'
    as _i3;
import 'package:velvet_framework/src/core/event/contracts/velvet_event_bus_contract.dart'
    as _i4;
import 'package:velvet_framework/src/core/event/events/velvet_event.dart'
    as _i5;
import 'package:velvet_framework/src/core/logger/contracts/velvet_logger_contract.dart'
    as _i6;
import 'package:velvet_framework/src/core/logger/velvet_logger_channel.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamSubscription_0<T1> extends _i1.SmartFake
    implements _i2.StreamSubscription<T1> {
  _FakeStreamSubscription_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EnvConfigContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnvConfigContract extends _i1.Mock implements _i3.EnvConfigContract {
  @override
  bool get isEnabled => (super.noSuchMethod(
        Invocation.getter(#isEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [VelvetEventBusContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockVelvetEventBusContract extends _i1.Mock
    implements _i4.VelvetEventBusContract {
  @override
  void dispatch<T extends _i5.VelvetEvent>(T? event) => super.noSuchMethod(
        Invocation.method(
          #dispatch,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.StreamSubscription<T> listen<T extends _i5.VelvetEvent>(
          void Function(T)? onEvent) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onEvent],
        ),
        returnValue: _FakeStreamSubscription_0<T>(
          this,
          Invocation.method(
            #listen,
            [onEvent],
          ),
        ),
        returnValueForMissingStub: _FakeStreamSubscription_0<T>(
          this,
          Invocation.method(
            #listen,
            [onEvent],
          ),
        ),
      ) as _i2.StreamSubscription<T>);
}

/// A class which mocks [VelvetLoggerContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockVelvetLoggerContract extends _i1.Mock
    implements _i6.VelvetLoggerContract {
  @override
  void info(
    dynamic message, {
    Object? error,
    StackTrace? stackTrace,
    List<_i7.VelvetLoggerChannel>? channels,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
            #channels: channels,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    dynamic message, {
    Object? error,
    StackTrace? stackTrace,
    List<_i7.VelvetLoggerChannel>? channels,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
            #channels: channels,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(
    dynamic message, {
    Object? error,
    StackTrace? stackTrace,
    List<_i7.VelvetLoggerChannel>? channels,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
            #channels: channels,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void debug(
    dynamic message, {
    Object? error,
    StackTrace? stackTrace,
    List<_i7.VelvetLoggerChannel>? channels,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {
            #error: error,
            #stackTrace: stackTrace,
            #channels: channels,
          },
        ),
        returnValueForMissingStub: null,
      );
}
